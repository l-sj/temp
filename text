Subversion ::
Perforce ::
Bazaar ::
Atomic ::
Committed ::
Modified ::
Staged ::
Staging ::
Area ::
Local ::
Operations ::
checkout ::
expat ::
curl ::
Fedora ::
Forge ::
SourceForge ::
Port ::
Prompt ::
Emacs ::
difference :: 
different ::
differential ::
emerge ::
verb ::
Push ::
Pull ::
Skeleton ::
Contribute ::
Tracked ::
Untracked ::
Unmodified ::
Tracked : 관리대상임
Untracked : 관리대상이 아닌 상태
Unmodified : 수정하지 않은 상태
Modified : 수정한 상태
Staged : 커밋하면 저장소에 기록되는 상태
status ::
directory ::
README ::
branch ::
bench marks ::
ignore ::

.gitignore 파일에 입력하는 패턴은 아래 규칙을 따른다:
	- 아무것도 없는 줄이나, #로 시작하는 줄은 무시한다.
	- 표준 Glob 패턴을 사용한다.
	- 디렉토리는 슬래시(/)를 끝에 사용하는 것으로 표현한다.
	- 느낌표(!)로 시작하는 패턴의 파일은 무시하지 않는다.

	# a comment - 이 줄은 무시한다.
	# 확장자가 .a인 파일 무시
	*.a
	# 윗 줄에서 확장자가 .a인 파일은 무시하게 했지만 lib.a는 무시하지 않는다.
	!lib.a
	# 루트 디렉토리에 있는 TODO파일은 무시하고 subdir/TODO처럼 하위디렉토리에 있는 파일은 무시하지 않는다.
	/TODO
	# build/ 디렉토리에 있는 모든 파일은 무시한다.
	build/
	# `doc/notes.txt`같은 파일은 무시하고 doc/server/arch.txt같은 파일은 무시하지 않는다.
	doc/*.txt
	# `doc` 디렉토리 아래의 모든 .txt 파일을 무시한다.
	doc/**/*.txt

Patch ::
unnecessary ::
pretty ::
format ::
hash ::
Abbreviated ::
Author ::
Committer ::
Author : 저자는 원래 작업을 수행한 원작자
Committer : 마지막으로 이 작업을 적용한 사람
만약 당신이 어떤 프로젝트에 패치를 보냈고 그 프로젝트의 담당자가 패치를 적용했다면 두 명의 정보를 모두 알 필요가 있다. 그래서 이 경우 당신이 저자고 그 담당자가 커미터다. 

ASCII :: 아스키 : American Standard Code for Information Interchange의 약어

relative ::
since ::
until ::
minutes ::
ago ::
match ::
Undo ::
한 번 되돌리면 복구할 수 없어서 주의해야 한다. Git을 사용하면 우리가 한 실수를 복구하지 못할 것은 거의 없지만 되돌리기는 복구할 수 없다.
amend ::
amend : 완료한 커밋을 수정해야 할 때
initial ::
commit ::
forgotten ::

Staging Area와 워킹 디렉토리 사이를 넘나드는 방법. ('스테이지에 올라간 파일' 목록에서 '스테이지에 올라가지 않은 파일' 목록으로 되돌리기)
	git reset HEAD <file : Unstage 상태로 변경할 파일명>

수정한 파일을 되돌리는 방법. (수정 이전의 파일로 덮어썼기 때문에 수정했던 내용은 전부 사라짐)
	git checkout -- <file : 수정이전으로 되돌릴 파일명>

Stash ::
remote ::
	리모트 저장소는 인터넷이나 네트워크 어딘가에 있는 저장소를 가르킴.
	
fetch ::
	git fetch [remote-name]
		fetch 명령은 리모트 저장소의 데이터를 모두 로컬로 가져오지만, 자동으로 머지하지 않기때문에 로컬에서 하던 작업을 정리하고 나서 수동으로 머지해야 한다.

	git pull
		리모트 저장소 브랜치에서 데이터를 가져올 뿐만 아니라 자동으로 로컬 브랜치와 머지시킬 수 있다.

	master 브랜치를 origin 서버에 Push
		git push [리모트 저장소 이름] [브랜치 이름]

Stale ::
Tracked ::
Lightweight ::
Annotated ::
Privacy ::
Guard ::
Tagger ::
BEGIN PGP SIGNATURE ::
experiment ::
Keyring ::
verify ::
Compressing ::
Counting ::
Writing ::
Bash ::
Auto-completion ::
Alias ::
current ::

Git은 데이터를 Change Set이나 변경사항(Diff)으로 기록하지 않고 일련의 스냅샷으로 기록한다는 것
Git은 HEAD라는 특수한 포인터가 있다. 이 포인터는 지금 작업하는 로컬 브랜치를 가리킨다.

decorate ::
Production ::
strategy ::
Conflict ::
Workflow ::
reference ::

required ::
optional ::
로컬에 존재하는 브랜치가 리모트의 특정 브랜치를 추적하게 하려면 git branch 명령에 -u나 --set-upstream-to 옵션을 붙여서 아래와 같이 설정.
	git branch -u origin/serverfix

Upstream ::
	Upstream 별명
	추적 브랜치를 설정했다면 추적 브랜치를 @{upstream}이나 @{u}로 짧게 대체하여 사용할 수 있다. 
	master 브랜치가 origin/master 브랜치를 추적하는 경우라면 git merge origin/master 명령과 git merge @{u} 명령을 똑같이 사용할 수 있다.

ahead ::
behind ::

리모트 브랜치를 삭제
	예) serverfix라는 리모트 브랜치를 삭제
		git push origin --delete serverfix

Rebase ::
	Git에서 한 브랜치에서 다른 브랜치로 합치는 방법으로는 두 가지가 있다. 하나는 Merge 이고 다른 하나는 Rebase 다. 
	Rebase를 하든지, Merge를 하든지 최종 결과물은 같고 커밋 히스토리만 다르다는 것이 중요하다. 
	Rebase 의 경우는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합치고 Merge 의 경우는 두 브랜치의 최종결과만을 가지고 합친다.

command ::
Fast-forward ::
force  ::
rebase ::
	git rebase [basebranch] [topicbranch]
	server 브랜치를 master 브랜치로 Rebase 할 수 있다. 
	이 명령은 토픽(server) 브랜치를 베이스(master) 브랜치에 Rebase 한다.
	베이스(master) 브랜치에서 해당 명령어를 실행하면 토픽(server) 브랜치로 checkout됨.
	git checkout master
	git merge server
	git branch -d server

로컬 브랜치에서 작업할 때는 히스토리를 정리하기 위해서 Rebase 할 수도 있지만, Push로 리모트에든 밖으로 내보낸 커밋에 대해서는 절대 Rebase 하지 말아야 한다.


usage: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] [<upstream>] [<branch>]
   or: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
   or: git-rebase --continue | --abort | --skip | --edit-todo

Available options are
    -v, --verbose         display a diffstat of what changed upstream
    -q, --quiet           be quiet. implies --no-stat
    --autostash           automatically stash/stash pop before and after
    --fork-point          use 'merge-base --fork-point' to refine upstream
    --onto ...            rebase onto given branch instead of upstream
    -p, --preserve-merges
                          try to recreate merges instead of ignoring them
    -s, --strategy ...    use the given merge strategy
    --no-ff               cherry-pick all commits, even if unchanged
    -m, --merge           use merging strategies to rebase
    -i, --interactive     let the user edit the list of commits to rebase
    -x, --exec ...        add exec lines after each commit of the editable list
    -k, --keep-empty         preserve empty commits during rebase
    -f, --force-rebase    force rebase even if branch is up to date
    -X, --strategy-option ...
                          pass the argument through to the merge strategy
    --stat                display a diffstat of what changed upstream
    -n, --no-stat         do not show diffstat of what changed upstream
    --verify              allow pre-rebase hook to run
    --rerere-autoupdate   allow rerere to update index with resolved conflicts
    --root                rebase all reachable commits up to the root(s)
    --autosquash         move commits that begin with squash
                          move commits that begin with squash!/fixup! under -i
    --committer-date-is-author-date
                          passed to 'git am'
    --ignore-date         passed to 'git am'
    --whitespace ...      passed to 'git apply'
    --ignore-whitespace   passed to 'git apply'
    -C ...                passed to 'git apply'
    -S, --gpg-sign[=...]  GPG-sign commits

Actions:
    --continue            continue
    --abort               abort and check out the original branch
    --skip                skip current patch and continue
    --edit-todo           edit the todo list during an interactive rebase


reset ::
	usage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]
	   or: git reset [-q] <tree-ish> [--] <paths>...
	   or: git reset --patch [<tree-ish>] [--] [<paths>...]
	
	    -q, --quiet           be quiet, only report errors
	    --mixed               reset HEAD and index
	    --soft                reset only HEAD
	    --hard                reset HEAD, index and working tree
	    --merge               reset HEAD, index and working tree
	    --keep                reset HEAD but keep local changes
	    -p, --patch           select hunks interactively
	    -N, --intent-to-add   record only the fact that removed paths will be added later
